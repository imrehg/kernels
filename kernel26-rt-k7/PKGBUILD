pkgname=kernel26-rt-k7
_basekernel=2.6.35.7
_kernelname=${pkgname:8}
_extradir=""
_xenomaiver=2.5.5.2
_adeosver=2.7-04
pkgver=${_basekernel}
pkgrel=1
pkgdesc="Lab Edition ofthe Linux Kernel and modules (ThinkPad R50e)"
arch=(i686)
license=('GPL2')
url="http://www.kernel.org"
backup=(etc/mkinitcpio.d/${pkgname}.preset)
depends=('coreutils' 'module-init-tools' 'mkinitcpio>=0.5.18')
install=kernel26.install
source=(ftp://ftp.kernel.org/pub/linux/kernel/v2.6/${_extradir}linux-${_basekernel}.tar.bz2
        # the kernel config files
        config${_kernelname}
        # standard config files for mkinitcpio ramdisk
        kernel26.preset
	# xenomai
	http://download.gna.org/xenomai/stable/xenomai-${_xenomaiver}.tar.bz2
	# adeos i-pipe patch
#	http://download.gna.org/adeos/patches/v2.6/x86/adeos-ipipe-${_basekernel}-x86-${_adeosver}.patch
)

build() {
  KARCH=x86

# ## Xenomai
#   cd "${srcdir}"
#   msg "Connecting to GIT server...."

#   if [ -d $_gitname ] ; then
#     cd ${_gitname} && git pull origin master
#     msg "The local files are updated."
#   else
#     git clone ${_gitroot}
#     cd ${_gitname}
#   fi

#   msg "GIT checkout done or server timeout"

  cd xenomai-${_xenomaiver}
  scripts/prepare-kernel.sh --linux=../linux-${_basekernel} \
    --adeos=ksrc/arch/${KARCH}/patches/adeos-ipipe-${_basekernel}-${KARCH}-${_adeosver}.patch \
    --arch=${KARCH} || return 1


## SETUP
  cd ${srcdir}/linux-${_basekernel}

  # Change kernel name in kernel26.preset and kernel26.install
  sed \
    -e  "s/ALL_kver='.*/ALL_kver='${_basekernel}${_kernelname}'/g" \
  -i $startdir/kernel26.preset
  sed \
    -e  "s/KERNEL_NAME=.*/KERNEL_NAME=${_kernelname}/g" \
    -e  "s/KERNEL_VERSION=.*/KERNEL_VERSION=${_basekernel}${_kernelname}/g" \
  -i $startdir/kernel26.install

  cat ../config${_kernelname} >./.config

  # Change kernel name in config file
  if [ "${_kernelname}" != "" ]; then
    sed -i "s|CONFIG_LOCALVERSION=.*|CONFIG_LOCALVERSION=\"${_kernelname}\"|g" ./.config
  fi

  # get kernel version
  make LOCALVERSION=${_kernelname} prepare
  _kernver="$(make kernelrelease)"
  # load configuration
#  yes "" | make menuconfig

### build!
  ####################
  # stop here
  # this is useful to configure the kernel
  #msg "Stopping build"
  #return 1
  ####################
  make -j6 LOCALVERSION=${_kernelver} [ARCH=${KARCH}] bzImage modules || return 1
  mkdir -p ${pkgdir}/{lib/modules,boot}
  make -j6 INSTALL_MOD_PATH=${pkgdir} modules_install || return 1
#  cp System.map ${pkgdir}/boot/System.map26
#  cp arch/$KARCH/boot/bzImage ${pkgdir}/boot/vmlinuz26
  cp System.map ${pkgdir}/boot/System.map26${_kernelname}
  cp arch/$KARCH/boot/bzImage ${pkgdir}/boot/vmlinuz26${_kernelname}
  cp .config ${pkgdir}/boot/config${_kernelname}

  install -D -m644 Makefile \
    ${pkgdir}/usr/src/linux-${_kernver}/Makefile
  install -D -m644 kernel/Makefile \
    ${pkgdir}/usr/src/linux-${_kernver}/kernel/Makefile
  install -D -m644 .config \
    ${pkgdir}/usr/src/linux-${_kernver}/.config
  mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/include

  for i in acpi asm-generic config linux math-emu media net pcmcia scsi sound trace video; do
    cp -a include/$i ${pkgdir}/usr/src/linux-${_kernver}/include/
  done

 # copy arch includes for external modules
  mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/arch/x86
  cp -a arch/x86/include ${pkgdir}/usr/src/linux-${_kernver}/arch/x86/

  # copy files necessary for later builds, like nvidia and vmware
  cp Module.symvers ${pkgdir}/usr/src/linux-${_kernver}
  cp -a scripts ${pkgdir}/usr/src/linux-${_kernver}
  # fix permissions on scripts dir
  chmod og-w -R ${pkgdir}/usr/src/linux-${_kernver}/scripts
  #mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/.tmp_versions

  mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/arch/$KARCH/kernel

  cp arch/$KARCH/Makefile ${pkgdir}/usr/src/linux-${_kernver}/arch/$KARCH/
  if [ "$CARCH" = "i686" ]; then
    cp arch/$KARCH/Makefile_32.cpu ${pkgdir}/usr/src/linux-${_kernver}/arch/$KARCH/
  fi
  cp arch/$KARCH/kernel/asm-offsets.s ${pkgdir}/usr/src/linux-${_kernver}/arch/$KARCH/kernel/

  # add headers for lirc package
  mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/drivers/media/video
  cp drivers/media/video/*.h  ${pkgdir}/usr/src/linux-${_kernver}/drivers/media/video/
  for i in bt8xx cpia2 cx25840 cx88 em28xx et61x251 pwc saa7134 sn9c102 usbvideo zc0301; do
   mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/drivers/media/video/$i
   cp -a drivers/media/video/$i/*.h ${pkgdir}/usr/src/linux-${_kernver}/drivers/media/video/$i
  done
  # add dm headers
  mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/drivers/md
  cp drivers/md/*.h  ${pkgdir}/usr/src/linux-${_kernver}/drivers/md
  # add inotify.h
  mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/include/linux
  cp include/linux/inotify.h ${pkgdir}/usr/src/linux-${_kernver}/include/linux/
  # add CLUSTERIP file for iptables
  mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/net/ipv4/netfilter/
  # add wireless headers
  mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/net/mac80211/
  cp net/mac80211/*.h ${pkgdir}/usr/src/linux-${_kernver}/net/mac80211/
  # add dvb headers for external modules
  # in reference to:
  # http://bugs.archlinux.org/task/9912
  mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb/dvb-core
  cp drivers/media/dvb/dvb-core/*.h ${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb/dvb-core/
  # add dvb headers for external modules
  # in reference to:
  # http://bugs.archlinux.org/task/11194
  # mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/include/config/dvb/
  # cp include/config/dvb/*.h ${pkgdir}/usr/src/linux-${_kernver}/include/config/dvb/
  # add xfs and shmem for aufs building
  mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/fs/xfs
  mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/mm
  cp fs/xfs/xfs_sb.h ${pkgdir}/usr/src/linux-${_kernver}/fs/xfs/xfs_sb.h
  # add vmlinux
  cp vmlinux ${pkgdir}/usr/src/linux-${_kernver}
  # copy in Kconfig files
  for i in `find . -name "Kconfig*"`; do
    mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/`echo $i | sed 's|/Kconfig.*||'`
    cp $i ${pkgdir}/usr/src/linux-${_kernver}/$i
  done

  # cd ${pkgdir}/usr/src/linux-${_kernver}/include && ln -s asm-$KARCH asm
  # add header for aufs2-util
  # cp -a ${srcdir}/linux-$_basekernel/include/asm-generic/bitsperlong.h ${pkgdir}/usr/src/linux-${_kernver}/include/asm/

  chown -R root.root ${pkgdir}/usr/src/linux-${_kernver}
  find ${pkgdir}/usr/src/linux-${_kernver} -type d -exec chmod 755 {} \;
#### FIX
  # cd ${pkgdir}/lib/modules/${_kernver} && \
  #   (rm -f source build; ln -sf ../../../usr/src/linux-${_kernver} build)

### Main kernel version
#  # install fallback mkinitcpio.conf file and preset file for kernel
#  install -m644 -D ${srcdir}/${pkgname}.preset ${pkgdir}/etc/mkinitcpio.d/${pkgname}.preset || return 1
#  # set correct depmod command for install
#  sed -i -e "s/KERNEL_VERSION=.*/KERNEL_VERSION=${_kernver}/g" $startdir/kernel26.install

# New version
  # install fallback mkinitcpio.conf file and preset file for kernel
  install -m644 -D ${srcdir}/kernel26.preset ${pkgdir}/etc/mkinitcpio.d/${pkgname}.preset || return 1
  sed \
    -e "s|source .*|source /etc/mkinitcpio.d/kernel26${_kernelname}.kver|g" \
    -e "s|ALL_kver=.*|ALL_kver='${_basekernel}${_kernelname}'|g" \
    -e "s|default_image=.*|default_image=\"/boot/${pkgname}.img\"|g" \
    -e "s|fallback_image=.*|fallback_image=\"/boot/${pkgname}-fallback.img\"|g" \
    -i ${pkgdir}/etc/mkinitcpio.d/${pkgname}.preset

  echo -e "# DO NOT EDIT THIS FILE\nALL_kver='${_kernver}'" > ${startdir}/pkg/etc/mkinitcpio.d/${pkgname}.kver
  # remove unneeded architectures
  rm -rf ${pkgdir}/usr/src/linux-${_kernver}/arch/{alpha,arm,arm26,avr32,blackfin,cris,frv,h8300,ia64,m32r,m68k,m68knommu,mips,microblaze,mn10300,parisc,powerpc,ppc,s390,sh,sh64,sparc,sparc64,um,v850,xtensa}

  ## Xenomai again
  cd ${srcdir}/xenomai-${_xenomaiver}
  ./configure --prefix=/usr --includedir=/usr/include/xenomai --enable-x86-sep || return 1
  make || return 1
  make DESTDIR=${pkgdir} install || return 1
  install -D -m644 ksrc/nucleus/udev/rtheap.rules ${pkgdir}/etc/udev/rules.d/rtheap.rules
  install -D -m644 ksrc/nucleus/udev/rtpipe.rules ${pkgdir}/etc/udev/rules.d/rtpipe.rules
  rm -rf ${pkgdir}/dev

  # remove firmware, as separate package provides them.
  rm -fr ${pkgdir}/lib/firmware
}

md5sums=('f741879bcd3a5366a1bbe0ad5cdb7935'
         '2e2aab8a2efc2e3b0628dcc2235e0d9b'
         '3066face08c5c0f97dbeeac2187e6815'
         '1ee31275830c77a024e27655d2fe8f69')
